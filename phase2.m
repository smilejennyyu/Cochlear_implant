% 3.1 Create program to read the file
filename = 'Khan_Girl.wav';
[raw_data,sample_rate] = audioread(filename);

% 3.2 Check if input sound is stereo
[m,n] = size(raw_data);
if n > 1 % If stereo:
    % Combine two channels into one and take average
    raw_data_mono = sum(raw_data,2) / size(raw_data,2);
    %disp(raw_data_mono);
else
    raw_data_mono = raw_data;
end

% 3.3 Play the sound
%sound(raw_data_mono, sample_rate);

% 3.4 Write sound to a new file 
output_file = strcat('new_', filename);
audiowrite(output_file, raw_data_mono, sample_rate);

% 3.5 Plot sound wave as a function of sample number
stop_time = size(raw_data_mono)/sample_rate;
time_step = 1/sample_rate;
t = time_step:time_step:stop_time;
sample_number = 1:1:size(raw_data_mono);
%t = 1:1:size(raw_data_mono);

%disp(strcat('raw_data_mono size: ', string(size(raw_data_mono))));
%disp(strcat('t size: ', string(size(t))));
%figure('Name', 'Raw Data Mono vs. Sample Number');
%plot(sample_number, raw_data_mono,'g');
%title('3.5 Mono Sound Waveform(Amplitude vs. Sample Number)');

% 3.6 If sampling rate is greater than 16k, downsample it
data_16k = resample(raw_data_mono, 16000, sample_rate);
%disp(strcat('data_16k size: ', string(size(data_16k))));
rate_16k = 16000;
stop_time_16k = size(data_16k)/rate_16k;
t_16 = 1/rate_16k:1/rate_16k:stop_time_16k;

% figure('Name', 'Raw Data Resampled');
% plot(t_16(1:1000), data_16k(1:1000),'r');
% sound(data_16k, rate_16k);
% figure('Name', 'Data Comparison');
% plot(t_16(1:1000), data_16k(1:1000),'r',t(1:2750), raw_data_mono(1:2750),'g');


% % 3.7 Generate a signal using 1kHz cosine function that has the same time
% % Play the sound and plot two cycles of its waveform versus time
% freq = 1000;
% cos_1kHz = cos(2000*pi*t);
% sound(cos_1kHz, freq);
% %disp(t(size(t)));
% cycle_plot = 2;
% time_plot = cycle_plot/freq;
% figure('Name', 'Two Waveforms of Cosine Function');
% plot(t(1:time_plot*sample_rate),(cos_1kHz(1:time_plot*sample_rate)) );
% title('3.7 Two Waveforms of Cosine(Amplitude vs. Time)');

%------Phase 2 start here-------%
% figure('Name', 'Raw Data Resampled');
% plot(t_16(1:1000), data_16k(1:1000),'r');
% data16k_band1 = filter(Equiripple1, data_16k);
% figure('Name', 'Bandpass output 1 in time');
% plot(t_16(1:1000), data16k_band1(1:1000),'r');
% figure('Name', 'Convolved output');
% data_conv = conv(data_16k, Equiripple1);
% plot(t_16(1:1000), data_conv(1:1000),'g');
% sound(data_16k, rate_16k);
% figure('Name', 'Data Comparison');
% plot(t_16(1:1000), data_16k(1:1000),'r',t(1:2750), raw_data_mono(1:2750),'g');

% declaring filter parameters


passband_num=12
bandwidth=659;

pass_1_array=100:bandwidth:passband_num*bandwidth
pass_2_array=100+bandwidth:bandwidth:(passband_num+1)*bandwidth

freq = 600;
cos_1kHz = cos(freq*2*pi*t_16); % lesson learned, use the same sample rate for t!
cycle_plot = 20;
time_plot = cycle_plot/freq;
figure('Name', 'Two Waveforms of Cosine Function');
plot(t(1:time_plot*rate_16k),(cos_1kHz(1:time_plot*rate_16k)) );

% plotTwoPassband(pass_1_array, pass_2_array, cos_1kHz, time_plot, rate_16k, t_16);
plotAllPassband(pass_1_array, pass_2_array, cos_1kHz, time_plot, rate_16k, t_16, passband_num);
    
function plotTwoPassband(pass_1_array, pass_2_array, cos_1kHz, time_plot, rate_16k, t_16)
    low_start=pass_1_array(1);
    low_end=pass_2_array(1);
    high_start=pass_1_array(length(pass_1_array));
    high_end=pass_2_array(length(pass_2_array));
    filtered_cos1k_low = filter(GenEquiripple(low_start,low_end), cos_1kHz);
    figure('Name', 'Bandpass cos 1k 1 in time (low)');
    plot(t_16(1:time_plot*rate_16k),(filtered_cos1k_low(1:time_plot*rate_16k)) );
    filtered_cos1k_high = filter(GenEquiripple(high_start,7950), cos_1kHz);
    figure('Name', 'Bandpass cos 1k 1 in time (high)');
    plot(t_16(1:time_plot*rate_16k),(filtered_cos1k_high(1:time_plot*rate_16k)));
end

function plotAllPassband(pass_1_array, pass_2_array, cos_1kHz, time_plot, rate_16k, t_16, passband_num)
    for p = 1:passband_num
        if p==12
            filtered_cos1k = filter(GenEquiripple(pass_1_array(p),7950), cos_1kHz);
        else
            filtered_cos1k = filter(GenEquiripple(pass_1_array(p),pass_2_array(p)), cos_1kHz);
        end
        title=strcat('Bandpass cos 1k 1 in time',num2str(pass_1_array(p)),'-',num2str(pass_2_array(p)));
        figure('Name', title);
        plot(t_16(1:time_plot*rate_16k),(filtered_cos1k(1:time_plot*rate_16k)) );
    end
end

function Hd2 = GenEquiripple(pass1, pass2)
%GENEQUIRIPPLE Returns a discrete-time filter object.

% MATLAB Code
% Generated by MATLAB(R) 9.4 and DSP System Toolbox 9.6.
% Generated on: 13-Jul-2019 16:23:15

% Generalized REMEZ FIR Bandpass filter designed using the FIRGR function.

% All frequency values are in Hz.
display(pass1);
display(pass2);
Fs = 16000;  % Sampling Frequency

Fstop1 = pass1-50;              % First Stopband Frequency
Fpass1 = pass1;             % First Passband Frequency
Fpass2 = pass2;             % Second Passband Frequency
Fstop2 = pass2+50;             % Second Stopband Frequency
Dstop1 = 0.001;           % First Stopband Attenuation
Dpass  = 0.028774368332;  % Passband Ripple
Dstop2 = 0.001;           % Second Stopband Attenuation
dens   = 20;              % Density Factor

% Calculate the coefficients using the FIRGR function.
b  = firgr('minorder', [0 Fstop1 Fpass1 Fpass2 Fstop2 Fs/2]/(Fs/2), [0 ...
           0 1 1 0 0], [Dstop1 Dpass Dstop2], {dens});
Hd2 = dfilt.dffir(b);
end

function Hd1 = Equiripple1(pass1, pass2)
%EQUIRIPPLE1 Returns a discrete-time filter object.

% MATLAB Code
% Generated by MATLAB(R) 9.4 and DSP System Toolbox 9.6.
% Generated on: 13-Jul-2019 15:14:23

% Equiripple Bandpass filter designed using the FIRPM function.

% All frequency values are in Hz.
Fs = 16000;  % Sampling Frequency

Fstop1 = pass1-50;              % First Stopband Frequency
Fpass1 = pass1;             % First Passband Frequency
Fpass2 = pass2;             % Second Passband Frequency
Fstop2 = pass2+50;             % Second Stopband Frequency

Dstop1 = 0.001;           % First Stopband Attenuation
Dpass  = 0.028774368332;  % Passband Ripple
Dstop2 = 0.001;           % Second Stopband Attenuation
dens   = 20;              % Density Factor

% Calculate the order from the parameters using FIRPMORD.
[N, Fo, Ao, W] = firpmord([Fstop1 Fpass1 Fpass2 Fstop2]/(Fs/2), [0 1 ...
                          0], [Dstop1 Dpass Dstop2]);

% Calculate the coefficients using the FIRPM function.
b  = firpm(N, Fo, Ao, W, {dens});
Hd1 = dfilt.dffir(b);
end
% [EOF]


